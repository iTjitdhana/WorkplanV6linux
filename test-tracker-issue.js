#!/usr/bin/env node

/**
 * р╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕▒р╕Нр╕лр╕▓р╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕Щр╣Йр╕▓ 3012/tracker р╕Ър╕Щ Linux Server
 * р╕зр╕▒р╕Щр╕Чр╕╡р╣И: 23 р╕Бр╕▒р╕Щр╕вр╕▓р╕вр╕Щ 2567
 */

const mysql = require('mysql2/promise');
const fetch = require('node-fetch');

// Configuration
const config = {
  // Database config
  db: {
    host: '192.168.0.94',
    user: 'jitdhana',
    password: 'iT12345$',
    database: 'esp_tracker',
    port: 3306
  },
  // API endpoints
  api: {
    baseUrl: 'http://192.168.0.96:3102',
    frontendUrl: 'http://192.168.0.96:3012'
  }
};

console.log('ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕▒р╕Нр╕лр╕▓р╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕Щр╣Йр╕▓ 3012/tracker р╕Ър╕Щ Linux Server');
console.log('=' .repeat(80));

async function testDatabaseConnection() {
  console.log('\nЁЯУК 1. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е...');
  
  try {
    const connection = await mysql.createConnection(config.db);
    console.log('тЬЕ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╣Ар╕гр╣Зр╕И');
    
    // р╕Чр╕Фр╕кр╕нр╕Ъ query р╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ
    const [rows] = await connection.execute('SELECT 1 as test');
    console.log('тЬЕ р╕Чр╕Фр╕кр╕нр╕Ъ query р╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щр╕Ьр╣Ир╕▓р╕Щ');
    
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Хр╕▓р╕гр╕▓р╕Зр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ъ tracker
    const [tables] = await connection.execute(`
      SELECT TABLE_NAME 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_SCHEMA = 'esp_tracker' 
      AND TABLE_NAME IN ('work_plans', 'logs', 'process_steps', 'production_status')
      ORDER BY TABLE_NAME
    `);
    
    console.log('ЁЯУЛ р╕Хр╕▓р╕гр╕▓р╕Зр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ъ tracker:');
    tables.forEach(table => {
      console.log(`   - ${table.TABLE_NAME}`);
    });
    
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З work_plans
    const [workPlans] = await connection.execute(`
      SELECT COUNT(*) as total, 
             COUNT(CASE WHEN production_date = CURDATE() THEN 1 END) as today_count
      FROM work_plans
    `);
    
    console.log(`ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕е work_plans: р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф ${workPlans[0].total} р╕гр╕▓р╕вр╕Бр╕▓р╕г, р╕зр╕▒р╕Щр╕Щр╕╡р╣Й ${workPlans[0].today_count} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
    
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З logs
    const [logs] = await connection.execute(`
      SELECT COUNT(*) as total,
             COUNT(CASE WHEN DATE(created_at) = CURDATE() THEN 1 END) as today_count
      FROM logs
    `);
    
    console.log(`ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕е logs: р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф ${logs[0].total} р╕гр╕▓р╕вр╕Бр╕▓р╕г, р╕зр╕▒р╕Щр╕Щр╕╡р╣Й ${logs[0].today_count} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
    
    await connection.end();
    return true;
  } catch (error) {
    console.log('тЭМ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
    console.log('ЁЯФН р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф:');
    console.log(`   Code: ${error.code}`);
    console.log(`   Errno: ${error.errno}`);
    console.log(`   SQL State: ${error.sqlState}`);
    return false;
  }
}

async function testBackendAPI() {
  console.log('\nЁЯМР 2. р╕Чр╕Фр╕кр╕нр╕Ъ Backend API...');
  
  try {
    // р╕Чр╕Фр╕кр╕нр╕Ъ health check
    console.log('ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ъ health check...');
    const healthResponse = await fetch(`${config.api.baseUrl}/health`);
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('тЬЕ Health check р╕Ьр╣Ир╕▓р╕Щ:', healthData.status);
    } else {
      console.log('тЭМ Health check р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', healthResponse.status);
      return false;
    }
    
    // р╕Чр╕Фр╕кр╕нр╕Ъ API work-plans
    console.log('ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ъ API work-plans...');
    const today = new Date().toISOString().slice(0, 10);
    const workPlansResponse = await fetch(`${config.api.baseUrl}/api/work-plans?date=${today}`);
    
    if (workPlansResponse.ok) {
      const workPlansData = await workPlansResponse.json();
      console.log('тЬЕ API work-plans р╕Ьр╣Ир╕▓р╕Щ');
      console.log(`ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕гр╕▒р╕Ъ: ${workPlansData.data ? workPlansData.data.length : 0} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
      
      if (workPlansData.data && workPlansData.data.length > 0) {
        console.log('ЁЯУЛ р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е:');
        console.log(`   - Job Code: ${workPlansData.data[0].job_code}`);
        console.log(`   - Job Name: ${workPlansData.data[0].job_name}`);
        console.log(`   - Production Date: ${workPlansData.data[0].production_date}`);
      }
    } else {
      console.log('тЭМ API work-plans р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', workPlansResponse.status);
      const errorText = await workPlansResponse.text();
      console.log('ЁЯФН р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф:', errorText);
      return false;
    }
    
    // р╕Чр╕Фр╕кр╕нр╕Ъ API logs
    console.log('ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ъ API logs...');
    const logsResponse = await fetch(`${config.api.baseUrl}/api/logs`);
    
    if (logsResponse.ok) {
      const logsData = await logsResponse.json();
      console.log('тЬЕ API logs р╕Ьр╣Ир╕▓р╕Щ');
      console.log(`ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕гр╕▒р╕Ъ: ${logsData.data ? logsData.data.length : 0} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
    } else {
      console.log('тЭМ API logs р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', logsResponse.status);
      return false;
    }
    
    return true;
  } catch (error) {
    console.log('тЭМ р╕Чр╕Фр╕кр╕нр╕Ъ Backend API р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
    return false;
  }
}

async function testFrontendAccess() {
  console.log('\nЁЯЦея╕П 3. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З Frontend...');
  
  try {
    // р╕Чр╕Фр╕кр╕нр╕Ър╕лр╕Щр╣Йр╕▓ tracker
    console.log('ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕лр╕Щр╣Йр╕▓ tracker...');
    const trackerResponse = await fetch(`${config.api.frontendUrl}/tracker`);
    
    if (trackerResponse.ok) {
      console.log('тЬЕ р╕лр╕Щр╣Йр╕▓ tracker р╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕Фр╣Й');
      console.log(`ЁЯУК Status Code: ${trackerResponse.status}`);
    } else {
      console.log('тЭМ р╕лр╕Щр╣Йр╕▓ tracker р╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Й:', trackerResponse.status);
      return false;
    }
    
    // р╕Чр╕Фр╕кр╕нр╕Ър╕лр╕Щр╣Йр╕▓ dashboard
    console.log('ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕лр╕Щр╣Йр╕▓ dashboard...');
    const dashboardResponse = await fetch(`${config.api.frontendUrl}/dashboard`);
    
    if (dashboardResponse.ok) {
      console.log('тЬЕ р╕лр╕Щр╣Йр╕▓ dashboard р╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕Фр╣Й');
    } else {
      console.log('тЭМ р╕лр╕Щр╣Йр╕▓ dashboard р╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Й:', dashboardResponse.status);
    }
    
    return true;
  } catch (error) {
    console.log('тЭМ р╕Чр╕Фр╕кр╕нр╕Ъ Frontend р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
    return false;
  }
}

async function testNetworkConnectivity() {
  console.log('\nЁЯМР 4. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Ар╕Др╕гр╕╖р╕нр╕Вр╣Ир╕▓р╕в...');
  
  try {
    // р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Др╕Ыр╕вр╕▒р╕З database server
    console.log('ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Др╕Ыр╕вр╕▒р╕З database server (192.168.0.94:3306)...');
    const net = require('net');
    
    const dbConnection = new Promise((resolve, reject) => {
      const socket = new net.Socket();
      const timeout = 5000;
      
      socket.setTimeout(timeout);
      socket.on('connect', () => {
        socket.destroy();
        resolve(true);
      });
      socket.on('timeout', () => {
        socket.destroy();
        reject(new Error('Connection timeout'));
      });
      socket.on('error', (err) => {
        socket.destroy();
        reject(err);
      });
      
      socket.connect(3306, '192.168.0.94');
    });
    
    await dbConnection;
    console.log('тЬЕ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н database server р╣Др╕Фр╣Й');
    
    // р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Др╕Ыр╕вр╕▒р╕З backend server
    console.log('ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Др╕Ыр╕вр╕▒р╕З backend server (192.168.0.96:3102)...');
    const backendConnection = new Promise((resolve, reject) => {
      const socket = new net.Socket();
      const timeout = 5000;
      
      socket.setTimeout(timeout);
      socket.on('connect', () => {
        socket.destroy();
        resolve(true);
      });
      socket.on('timeout', () => {
        socket.destroy();
        reject(new Error('Connection timeout'));
      });
      socket.on('error', (err) => {
        socket.destroy();
        reject(err);
      });
      
      socket.connect(3102, '192.168.0.96');
    });
    
    await backendConnection;
    console.log('тЬЕ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н backend server р╣Др╕Фр╣Й');
    
    return true;
  } catch (error) {
    console.log('тЭМ р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Ар╕Др╕гр╕╖р╕нр╕Вр╣Ир╕▓р╕вр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
    return false;
  }
}

async function generateDiagnosticReport() {
  console.log('\nЁЯУЛ 5. р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕Бр╕▓р╕гр╕зр╕┤р╕Щр╕┤р╕Ир╕Йр╕▒р╕в...');
  
  const results = {
    database: await testDatabaseConnection(),
    backend: await testBackendAPI(),
    frontend: await testFrontendAccess(),
    network: await testNetworkConnectivity()
  };
  
  console.log('\n' + '='.repeat(80));
  console.log('ЁЯУК р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ:');
  console.log('='.repeat(80));
  
  Object.entries(results).forEach(([test, passed]) => {
    const status = passed ? 'тЬЕ р╕Ьр╣Ир╕▓р╕Щ' : 'тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з';
    console.log(`${test.toUpperCase()}: ${status}`);
  });
  
  const allPassed = Object.values(results).every(result => result);
  
  if (allPassed) {
    console.log('\nЁЯОЙ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Ьр╣Ир╕▓р╕Щ! р╕гр╕░р╕Ър╕Ър╕Др╕зр╕гр╕Чр╕│р╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╕Ыр╕Бр╕Хр╕┤');
    console.log('\nЁЯТб р╕лр╕▓р╕Бр╕вр╕▒р╕Зр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓ р╣Гр╕лр╣Йр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:');
    console.log('   1. Browser cache р╣Бр╕ер╕░ cookies');
    console.log('   2. Network firewall settings');
    console.log('   3. Docker container logs');
  } else {
    console.log('\nтЪая╕П р╕Юр╕Ър╕Ыр╕▒р╕Нр╕лр╕▓р╕Ър╕▓р╕Зр╕кр╣Ир╕зр╕Щ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Фр╣Йр╕▓р╕Щр╕Ър╕Щ');
    console.log('\nЁЯФз р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В:');
    
    if (!results.database) {
      console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е MySQL');
      console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ user permissions р╣Бр╕ер╕░ firewall');
    }
    
    if (!results.backend) {
      console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Backend API server');
      console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Docker container status');
    }
    
    if (!results.frontend) {
      console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Frontend server');
      console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Next.js build р╣Бр╕ер╕░ deployment');
    }
    
    if (!results.network) {
      console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Ар╕Др╕гр╕╖р╕нр╕Вр╣Ир╕▓р╕в');
      console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ firewall р╣Бр╕ер╕░ routing');
    }
  }
  
  console.log('\nЁЯУЮ р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Др╕зр╕▓р╕бр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б:');
  console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ logs: docker compose -f docker-compose.linux.yml logs -f');
  console.log('   - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░: docker compose -f docker-compose.linux.yml ps');
  console.log('   - р╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Чр╕гр╕░р╕Ър╕Ъ: docker compose -f docker-compose.linux.yml restart');
}

// р╕гр╕▒р╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ
generateDiagnosticReport().catch(error => {
  console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ:', error.message);
  process.exit(1);
});

